devtools::load_all(".")
install.packages("fromatR","lintr")
install.packages("fromatR")
install.packages(lintr")
install.packages("lintr")
lintr::lint_package()
devtools::load_all(".")
library(devtools)
install.packages("testthat")
install.packages("testthat")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("droxygen2")
install.packages("roxygen2")
install.packages("knitr")
library(devtools)
install.packages("usethis")
install.packages("usethis")
library(devtools)
library(usethis)
library(devtools)
has_devel()
devtools::load_all(".")
devtools::use_package(tidyverse)
devtools::use_package("tidyverse")
install.packages("maps")
use_package("tidyverse")
use_package("dplyr")
devtools::load_all(".")
devtools::use_package("dplyr")
use_package("dplyr")
use_package("readr")
use_package("readr",TRUE)
use_package("readr",min_version=TRUE)
stop("file '")
?fars_read
data <- fars_read("./data/accident_2013.csv.bz2")
View(data)
class("test")
?print
as.integer(2.3)
as.integer(f)
?make_filenames
?make_filename
filename1 <- make_filename(2014)
filename2 <- make_filename("2015")
make_filename(2014)
make_filename("2015")
#'
#' @seealso \code{\link{make_filename}}
#' @seealso \code{\link{fars_read}}
#'
#' @examples
#' \dontrun{
#' data <- fars_read_years(years = c(2014, 2015))
#' }
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2014)
#'
#' @seealso \code{\link{make_filename}}
#' @seealso \code{\link{fars_read}}
#'
#' @examples
#' \dontrun{
#' data <- fars_read_years(years = c(2014, 2015))
#' }
#'
#' @export
fars_read_years <- function(years) {
brwoser()
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2014)
#'
#' @seealso \code{\link{make_filename}}
#' @seealso \code{\link{fars_read}}
#'
#' @examples
#' \dontrun{
#' data <- fars_read_years(years = c(2014, 2015))
#' }
#'
#' @export
fars_read_years <- function(years) {
browser()
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2014)
file <- make_filename(2014)
dat <- fars_read(file)
#'
#' @return If the input is a number or a string, then the output will be a
#'   character string containg the year at the end. Otherwise it will throw an
#'   error.
#'
#' @examples
#' filename1 <- make_filename(2014)
#' filename2 <- make_filename("2015")
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("./data/accident_%d.csv.bz2", year)
}
file <- make_filename(year)
file <- make_filename(2014)
dat <- fars_read(file)
dplyr::mutate(dat, year = 2014) %>%
dplyr::select(MONTH, 2014)
library(tidyverse)
dplyr::mutate(dat, year = 2014) %>%
dplyr::select(MONTH, 2014)
#'
#' @seealso \code{\link{make_filename}}
#' @seealso \code{\link{fars_read}}
#'
#' @examples
#' \dontrun{
#' data <- fars_read_years(years = c(2014, 2015))
#' }
#'
#' @export
fars_read_years <- function(years) {
browser()
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2014)
fars_read_years(c(2014, "2015"))
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2014)
#'   if the year is not valid.
#'
#' @seealso \code{\link{fars_read}}
#' @seealso \code{\link{make_filename}}
#' @seealso \code{\link{fars_summarize_years}}
#'
#' @examples
#' data <- fars_read_years(c(2014, "2015"))
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
test <- fars_summarize_years(2013)
View(test)
fars_summarize_years(2011)
fars_summarize_years(2012)
fars_summarize_years(2013)
fars_read_years(2013)
fars_read_years(2010)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(49,2015)
?fars_summarize_years
?fars_read_years
test <- fars_map_state(49,2015)
test
?fars_map_state
fars_map_state(49,2011)
fars_map_state(-1,2011)
fars_map_state(-1,2014)
